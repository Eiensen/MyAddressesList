@inject IJSRuntime JSRuntime
@inject IAddressService AddressService

<div class="row">
    <div class="col-3">
        <label for="startdate">С: </label>
        <input id="startdate" type="date" class="form-control" @bind-value="startDate" />
    </div>
    <div class="col-3">
        <label for="enddate">По: </label>
        <input id="enddate" type="date" class="form-control" @bind-value="endDate" />
    </div>
    <div class="col-2">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="LoadAddressesAsync">Поиск</button>
    </div>
    <div class="col-2">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="PrintReport">Печать</button>
    </div>
</div>

<div>
    @foreach (var value in (SearchingStates[])Enum.GetValues(typeof(SearchingStates)))
    {
        <input type="radio" name="state" checked=@(searchingState == value) @onchange="()=>searchingState = SetClassForWorkers(value)" />
        <span class="ml-2 mr-2">@value.GetDisplayName()</span>
    }
</div>
<select id="worker" @bind="workerName" class="@chooseWorkerClass">
    <option selected>выберите бригаду монтажников</option>
    @foreach (var worker in workers.Workers)
    {
        <option value="@worker">@worker</option>
    }
</select>


@code {
    private string workerName;

    private string chooseWorkerClass = "form-control hidden";

    private Worker workers;

    private DateTime startDate;

    private DateTime endDate;

    private SearchingStates searchingState = SearchingStates.Measurement;    

    [Parameter]
    public EventCallback<SearchingStates> OnSearchingStateChange { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        workers = new Worker();

        startDate = DateTime.Today;

        endDate = DateTime.Today;
    }

    private async Task LoadAddressesAsync()
    {
        switch (searchingState)
        {
            case SearchingStates.Measurement:
                await AddressService.SearchForAddressesByMeasurmentAsync(startDate, endDate);
                break;
            case SearchingStates.Montage:
                await AddressService.SearchForAddressesByMontageAsync(startDate, endDate);
                break;
            case SearchingStates.Workers:
                {
                    if (workerName == null)
                        return;

                    await AddressService.SearchForAddressesByWorkersAsync(startDate, endDate, workerName);
                    break;
                }
        }

        await OnSearchingStateChange.InvokeAsync(searchingState);
    }

    private SearchingStates SetClassForWorkers(SearchingStates states)
    {
        switch (states)
        {
            case SearchingStates.Measurement:
                chooseWorkerClass = "form-control hidden";
                return states;

            case SearchingStates.Montage:
                chooseWorkerClass = "form-control hidden";
                return states;

            case SearchingStates.Workers:
                chooseWorkerClass = "form-control";
                return states;

            default: return states;
        }
    }

    private void PrintReport()
    {
        JSRuntime.InvokeVoidAsync("print");
    }
}
