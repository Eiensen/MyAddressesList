@inject IAddressService AddressService

@if (isOpened)
{
    <div class="modal fade show" id="editAddressModal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog shadow-lg bg-white rounded" role="document">
            <div class="modal-content">
                <EditForm Model="addressToUpdate" OnValidSubmit="HandleSubmitsAsync">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="modal-header">
                        <h5 class="modal-title">Редактирование Замера</h5>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="name">Адрес</label>
                            <InputText id="name" @bind-Value="addressToUpdate.Name" class="form-control"></InputText>
                        </div>
                        <div class="row">
                            <div class="col">
                                <label for="startdate">Дата Замера: </label>
                                <input id="startdate" type="date" class="form-control" @bind-value="addressToUpdate.DateMeasurment" />
                            </div>
                            <div class="col">
                                <label for="montageDate">Дата Монтажа: </label>
                                <input id="montageDate" type="date" class="form-control" @bind-value="addressToUpdate.DateMontage" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="worker">Бригада</label>
                            <select id="worker" @bind="addressToUpdate.WorkersName" class="form-control">
                                <option selected>выберите бригаду монтажников</option>
                                @foreach (var worker in workers.Workers)
                                {
                                    <option value="@worker">@worker</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="sum">Сумма Заказа</label>
                            <InputNumber id="sum" @bind-Value="addressToUpdate.Sum" class="form-control"></InputNumber>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public int AddressId { get; set; }

    private Address addressToUpdate;

    private Worker workers;

    private bool isOpened = false;

    [Parameter]
    public EventCallback<bool> OnOpenedChange { get; set; }

    [Parameter]
    public bool IsOpened
    {
        get => isOpened;
        set
        {
            isOpened = value;

            classHidden = isOpened ? null : "hidden";
        }
    }

    private string classHidden;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        InitialDataForm();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        var address = await AddressService.GetAddressByIdAsync(AddressId);

        if (address != null)
        {
            addressToUpdate = new Address
            {
                DateMeasurment = address.DateMeasurment,
                DateMontage = address.DateMontage,
                Id = address.Id,
                Name = address.Name,
                Sum = address.Sum,
                WorkersName = address.WorkersName
            };
        }
    }

    private async Task HandleSubmitsAsync()
    {
        await AddressService.UpdateAddressAsync(addressToUpdate);

        IsOpened = false;

        await OnOpenedChange.InvokeAsync(IsOpened);
    }

    private void OnCancel()
    {
        IsOpened = false;

        OnOpenedChange.InvokeAsync(IsOpened);
    }

    private void InitialDataForm()
    {
        addressToUpdate = new Address();

        workers = new Worker();
    }
}
