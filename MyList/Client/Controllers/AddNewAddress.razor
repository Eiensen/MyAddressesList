@inject IAddressService AddressService


<div class="@classHidden">
    <EditForm Model="NewAddress" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Адрес</label>
            <InputText id="name" @bind-Value="NewAddress.Name" class="form-control"></InputText>
        </div>
        <div class="row">
            <div class="col">
                <label for="startdate">Дата Замера: </label>
                <input id="startdate" type="date" class="form-control" @bind-value="startDate" />
            </div>
            <div class="col">
                <label for="montageDate">Дата Монтажа: </label>
                <input id="montageDate" type="date" class="form-control" @bind-value="montageDate" />
            </div>
        </div>
        <div class="form-group">
            <label for="worker">Бригада</label>
            <select id="worker" @bind="NewAddress.WorkersName" class="form-control">
                <option selected>выберите бригаду монтажников</option>
                @foreach (var worker in workers.Workers)
                {
                    <option value="@worker">@worker</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="sum">Сумма Заказа</label>
            <InputNumber id="sum" @bind-Value="NewAddress.Sum" class="form-control"></InputNumber>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>

    </EditForm>
    <hr />
</div>


    @code {
        private Address NewAddress;

        private Worker workers;
        private DateTime startDate;
        private DateTime montageDate;
        private bool isOpened = false;

        [Parameter] public EventCallback<bool> OnOpenedChange { get; set; }

        [Parameter]
        public bool IsOpened { get => isOpened;
            set
            {
                isOpened = value;

                classHidden = isOpened ? null : "hidden";
            }
        }

        private string classHidden;

        protected override void OnInitialized()
        {
            base.OnInitialized();

            InitialDataForm();
        }

        private async Task HandleSubmit()
        {
            NewAddress.DateMeasurment = startDate;

            NewAddress.DateMontage = montageDate;

            await AddressService.AddNewAddress(NewAddress);

            InitialDataForm();

            IsOpened = false;

            await OnOpenedChange.InvokeAsync(IsOpened);
        }

        private void OnCancel()
        {
            IsOpened = false;

            OnOpenedChange.InvokeAsync(IsOpened);
        }

        private void InitialDataForm()
        {
            NewAddress = new Address();

            workers = new Worker();

            startDate = DateTime.Now;

            montageDate = DateTime.Now;
        }
    }
