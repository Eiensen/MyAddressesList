@inject IAddressService AddressService


@if (IsOpened)
{
    <div class="modal fade show" id="editAddressModal" tabindex="-1" role="dialog" style="display:block">
        <div class="modal-dialog shadow-lg bg-white rounded" role="document">
            <div class="modal-content">
                <EditForm Model="newAddress" OnValidSubmit="HandleSubmitAsync">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="modal-header">
                        <h5 class="modal-title">Редактирование Замера</h5>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="name">Адрес</label>
                            <InputText id="name" @bind-Value="newAddress.Name" class="form-control"></InputText>
                        </div>
                        <div class="row">
                            <div class="col">
                                <label for="startdate">Дата Замера: </label>
                                <input id="startdate" type="date" class="form-control" @bind-value="startDate" />
                            </div>
                            <div class="col">
                                <label for="montageDate">Дата Монтажа: </label>
                                <input id="montageDate" type="date" class="form-control" @bind-value="montageDate" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="worker">Бригада</label>
                            <select id="worker" @bind="newAddress.WorkersName" class="form-control">
                                <option selected>выберите бригаду монтажников</option>
                                @foreach (var worker in workers.Workers)
                                {
                                    <option value="@worker">@worker</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="sum">Сумма Заказа</label>
                            <InputNumber id="sum" @bind-Value="newAddress.Sum" class="form-control"></InputNumber>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    private Address newAddress;

    private Worker workers;

    private DateTime startDate;

    private DateTime montageDate;

    private bool isOpened = false;

    [Parameter] 
    public EventCallback<bool> OnOpenedChange { get; set; }

    [Parameter]
    public bool IsOpened
    {
        get => isOpened;
        set
        {
            isOpened = value;

            classHidden = isOpened ? null : "hidden";
        }
    }

    private string classHidden;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        InitialDataForm();
    }

    private async Task HandleSubmitAsync()
    {
        newAddress.DateMeasurment = startDate;

        newAddress.DateMontage = montageDate;

        await AddressService.AddNewAddressAsync(newAddress);

        InitialDataForm();

        IsOpened = false;

        await OnOpenedChange.InvokeAsync(IsOpened);
    }

    private void OnCancel()
    {
        IsOpened = false;

        OnOpenedChange.InvokeAsync(IsOpened);
    }

    private void InitialDataForm()
    {
        newAddress = new Address();

        workers = new Worker();

        startDate = DateTime.Now;

        montageDate = DateTime.Now;
    }
}
