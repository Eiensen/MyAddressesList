@page "/addresses"

@inject NavigationManager NavigationManager
@inject IAddressService AddressService


<h3>Мои Замеры @DateTime.Now.ToString("M")</h3>

@if (AddressService.Addresses == null)
{
    <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
}
else
{
    <hr />
    <button type="button" class="btn btn-primary form-control" @onclick="AddNewAddressToList"><b>+</b></button>
    <table class="table" style="font-size:small">
        <thead>
            <tr>
                <th>Замер</th>
                <th>Монтаж</th>
                <th>Адрес</th>
                <th>Сумма</th>
                <th>Бригада</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var addres in AddressService.Addresses)
            {
                <tr>
                    <td>@addres.DateMeasurment.ToString("dd/MM")</td>
                    <td>@addres.DateMontage.ToString("dd/MM")</td>
                    <td><b>@addres.Name</b></td>
                    <td>@addres.Sum</td>
                    <td>@addres.WorkersName</td>
                    <td>
                        <button type="button" class="btn btn-link" style="font-size:small" @onclick="@(() => EditAddress(addres.Id))">Edit</button>
                        <button type="button" class="btn btn-link" style="font-size:small" @onclick="@(() => DeleteAddress(addres.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <hr />
    @if (isEditModalWindowOpened)
    {
        <EditAddress AddressId="addressIdToEdit" IsOpened="isEditModalWindowOpened" OnOpenedChange="UpdateEditModalBoolen"></EditAddress>
    }
    @if (toggelOpen)
    {
        <AddNewAddress IsOpened="toggelOpen" OnOpenedChange="UpdateToggle"></AddNewAddress>
    }
}



@code {
    private bool toggelOpen = false;

    private int addressIdToEdit;

    private bool isEditModalWindowOpened = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAddressesAsync();
    }

    private async Task DeleteAddress(int id)
    {
        await AddressService.DeleteAddressAsync(id);

        await LoadAddressesAsync();
    }

    private void EditAddress(int id)
    {
        isEditModalWindowOpened = true;
        addressIdToEdit = id;
    }

    private async void UpdateEditModalBoolen(bool isModalClosed)
    {
        isEditModalWindowOpened = isModalClosed;

        if (!isEditModalWindowOpened)
        {
            await LoadAddressesAsync();
        }

        StateHasChanged();
    }

    private void AddNewAddressToList()
    {
        toggelOpen = !toggelOpen;

        StateHasChanged();
    }

    private async Task LoadAddressesAsync()
    {
        await AddressService.SearchForAddressesByMeasurmentAsync(DateTime.Now, DateTime.Now);
    }

    private void UpdateToggle(bool toggleFromChild)
    {
        toggelOpen = toggleFromChild;
    }
}
